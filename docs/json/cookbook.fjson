{"parents": [], "prev": {"link": "../examples/", "title": "Example Datasets"}, "next": {"link": "../etl/", "title": "ETL with cartoframes"}, "title": "Cheat Sheet", "meta": null, "body": "<div class=\"section\" id=\"cheat-sheet\">\n<h1>Cheat Sheet<a class=\"headerlink\" href=\"#cheat-sheet\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>For most operations below, you need to create a <a class=\"reference internal\" href=\"../cartoframes.data.clients/#cartoframes.data.clients.DataObsClient\" title=\"cartoframes.data.clients.DataObsClient\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DataObsClient</span></code></a> object. For example, here\u2019s how user <cite>cyclingfan</cite> with API key <cite>abc123</cite> creates one:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes.auth</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.data.clients</span> <span class=\"k\">import</span> <span class=\"n\">DataObsClient</span>\n\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;cyclingfan&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;abc123&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">do</span> <span class=\"o\">=</span> <span class=\"n\">DataObsClient</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"how-to-get-census-tracts-or-counties-for-a-state\">\n<h2>How to get census tracts or counties for a state<a class=\"headerlink\" href=\"#how-to-get-census-tracts-or-counties-for-a-state\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It\u2019s a fairly common use case that someone needs the Census tracts for a region. With cartoframes you have a lot of flexibility for obtaining this data.</p>\n<ol class=\"arabic simple\">\n<li><p>Get bounding box of the region you\u2019re interested in. Tools like <a class=\"reference external\" href=\"https://boundingbox.klokantech.com/\">Klockan\u2019s BoundingBox tool</a> with the CSV output are prefect. Alternatively, use a table with the appropriate covering region (e.g., an existing table with polygon(s) of Missouri, its counties, etc.).</p></li>\n<li><p>Get the FIPS code for the state(s) you\u2019re interested in. The US Census <a class=\"reference external\" href=\"https://www.census.gov/geo/reference/ansi_statetables.html\">provides a table</a> as do many other sites. In this case, I\u2019m choosing <code class=\"docutils literal notranslate\"><span class=\"pre\">29</span></code> for Missouri.</p></li>\n</ol>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes.data</span> <span class=\"k\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.viz</span> <span class=\"k\">import</span> <span class=\"n\">Map</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n\n\n<span class=\"c1\"># get all census tracts (clipped by water boundaries) in specific bounding box</span>\n<span class=\"n\">missouri_ct_dataset</span> <span class=\"o\">=</span> <span class=\"n\">do</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">(</span>\n    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">95.774147</span><span class=\"p\">,</span><span class=\"mf\">35.995682</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">89.098846</span><span class=\"p\">,</span><span class=\"mf\">40.613636</span><span class=\"p\">],</span>\n    <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.census_tract_clipped&#39;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># get dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">missouri_ct_dataset</span><span class=\"o\">.</span><span class=\"n\">dataframe</span>\n\n<span class=\"c1\"># filter out all census tracts that begin with Missouri FIPS (29)</span>\n<span class=\"c1\"># GEOIDs begin with two digit state FIPS, followed by three digit county FIPS</span>\n<span class=\"n\">missouri_ct_dataframe</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">geom_refs</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;29&#39;</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># write to carto</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">missouri_ct_dataframe</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;missouri_census_tracts&#39;</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># visualize to make sure it makes sense</span>\n<span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<img alt=\"Map with census tracts of Missouri\" src=\"../_images/cheatsheet_do_census_tracts.png\" />\n<p>Since <cite>pandas.Series.str.startswith</cite> can take multiple string prefixes, we can filter for more than one state at a time. In this case, get all Missouri and Kansas counties:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes.data</span> <span class=\"k\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.viz</span> <span class=\"k\">import</span> <span class=\"n\">Map</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n\n\n<span class=\"c1\"># get all counties in bounding box around Kansas and Missouri</span>\n<span class=\"n\">ks_mo_counties_dataset</span> <span class=\"o\">=</span> <span class=\"n\">do</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">(</span>\n    <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">102.1777729674</span><span class=\"p\">,</span><span class=\"mf\">35.995682</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">89.098846</span><span class=\"p\">,</span><span class=\"mf\">40.613636</span><span class=\"p\">],</span>\n    <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.county&#39;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># get dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">ks_mo_counties_dataset</span><span class=\"o\">.</span><span class=\"n\">dataframe</span>\n\n<span class=\"c1\"># filter out all counties that begin with Missouri (29) or Kansas (20) FIPS</span>\n<span class=\"n\">ks_mo_counties</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">geom_refs</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">((</span><span class=\"s1\">&#39;29&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;20&#39;</span><span class=\"p\">))]</span>\n\n<span class=\"c1\"># write to carto</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">ks_mo_counties</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ks_mo_counties&#39;</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># visualize to make sure it makes sense</span>\n<span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<img alt=\"Map with counties for Kansas and Missouri\" src=\"../_images/cheatsheet_do_counties.png\" />\n</div>\n<div class=\"section\" id=\"get-raw-measures-from-the-do\">\n<h2>Get raw measures from the DO<a class=\"headerlink\" href=\"#get-raw-measures-from-the-do\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To get raw census measures from the Data Observatory, the key part is the use of <cite>predenominated</cite> in the metadata and <cite>how=\u2019geoid\u2019</cite> (or some other geom_ref) when using <cite>DataObsClient.augment</cite>. If you don\u2019t use the <cite>how=</cite> flag, the Data Observatory will perform some calculations with the geometries in the table you are trying to augment.</p>\n<p>Here we\u2019re using a dataset with a column called <cite>geoid</cite> which has the GEOID of census tracts. Note that it\u2019s important to specify the same geometry ID in the measure metadata as the geometries you are wishing to enrich.</p>\n<ol class=\"arabic simple\">\n<li><p>Find the measures you want, either through <cite>DataObsClient.discovery</cite> or using the <a class=\"reference external\" href=\"https://cartodb.github.io/bigmetadata/\">Data Observatory catalog</a>.</p></li>\n<li><p>Create a dataframe with columns for each measure metadata object, or a list of dictionaries (like below) for your curated measures. Be careful to specify the specific geometry level you want the measures for and make sure the geometry reference (e.g., GEOID) you have for your geometries matches this geometry level.</p></li>\n</ol>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># get median income for 2006 - 2010 and 2011 - 2015 five year estimates.</span>\n <span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n     <span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B19013001&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;geom_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.tiger.census_tract&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;normalization&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;predenominated&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;numer_timespan&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2006 - 2010&#39;</span>\n <span class=\"p\">},</span> <span class=\"p\">{</span>\n     <span class=\"s1\">&#39;numer_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.acs.B19013001&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;geom_id&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;us.census.tiger.census_tract&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;normalization&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;predenominated&#39;</span><span class=\"p\">,</span>\n     <span class=\"s1\">&#39;numer_timespan&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;2011 - 2015&#39;</span>\n <span class=\"p\">}]</span>\n\n <span class=\"n\">boston_data</span> <span class=\"o\">=</span> <span class=\"n\">do</span><span class=\"o\">.</span><span class=\"n\">augment</span><span class=\"p\">(</span><span class=\"s1\">&#39;boston_census_tracts&#39;</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;geoid&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition tip\">\n<p class=\"admonition-title\">Tip</p>\n<p>It\u2019s best practice to keep your geometry identifiers as strings because leading zeros are removed when strings are converted to numeric types. This usually affects states with FIPS that begin with a zero, or Zip Codes in New England with leading zeros.</p>\n</div>\n</div>\n<div class=\"section\" id=\"engineer-your-do-metadata-if-you-already-have-geoid-or-another-geom-ref\">\n<h2>Engineer your DO metadata if you already have GEOID or another geom_ref<a class=\"headerlink\" href=\"#engineer-your-do-metadata-if-you-already-have-geoid-or-another-geom-ref\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Use <cite>how=\u2019geom_ref_col\u2019</cite> and specify the appropriate boundary in the metadata.</p>\n</div>\n<div class=\"section\" id=\"get-a-table-as-a-geodataframe\">\n<h2>Get a table as a GeoDataFrame<a class=\"headerlink\" href=\"#get-a-table-as-a-geodataframe\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>CARTOframes works with GeoPandas.</p>\n<p>You can create a <a class=\"reference internal\" href=\"../cartoframes.data/#cartoframes.data.Dataset\" title=\"cartoframes.data.Dataset\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dataset</span></code></a> instance from a GeoDataFrame:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">geopandas</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.data</span> <span class=\"k\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.auth</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.viz</span> <span class=\"k\">import</span> <span class=\"n\">Map</span><span class=\"p\">,</span> <span class=\"n\">Layer</span>\n\n<span class=\"n\">gdf</span> <span class=\"o\">=</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">gdf</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># save data in CARTO</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;USER NAME&gt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;API KEY&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">table_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;table_name&#39;</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a MAP</span>\n<span class=\"n\">Map</span><span class=\"p\">(</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>To convert the data from a CARTO table into a GeoPandas GeoDataFrame:</p>\n<ol class=\"arabic simple\">\n<li><p>Call Dataset.download using the <cite>decode_geom</cite> flag set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, like below.</p></li>\n<li><p>Wrap the result of step 1 in the GeoPandas GeoDataFrame constructor</p></li>\n</ol>\n<p>Your new GeoDataFrame will now have geometries decoded into Shapely objects that can then be used for spatial operations in your Python environment.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes.auth</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.data</span> <span class=\"k\">import</span> <span class=\"n\">Dataset</span>\n\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;USER NAME&gt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;API KEY&gt;&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"s1\">&#39;your_table&#39;</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">decode_geom</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">gdf</span> <span class=\"o\">=</span> <span class=\"n\">gpd</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">(</span><span class=\"n\">dataframe</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"skip-ssl-verification\">\n<h2>Skip SSL verification<a class=\"headerlink\" href=\"#skip-ssl-verification\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Some <a class=\"reference external\" href=\"https://carto.com/developers/on-premises/\">on premises installations of CARTO</a> don\u2019t need SSL verification. You can disable this using the requests library\u2019s <a class=\"reference external\" href=\"http://docs.python-requests.org/en/master/user/advanced/#session-objects\">Session class</a> and passing that into your <a class=\"reference internal\" href=\"../cartoframes.auth/#cartoframes.auth.Credentials\" title=\"cartoframes.auth.Credentials\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Credentials</span></code></a>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">requests</span> <span class=\"k\">import</span> <span class=\"n\">Session</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">verify</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;USER NAME&gt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;API KEY&gt;&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"perform-long-running-query-if-a-timeout-occurs\">\n<h2>Perform long running query if a timeout occurs<a class=\"headerlink\" href=\"#perform-long-running-query-if-a-timeout-occurs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In order to run a long running query, CARTO has the\n<cite>Batch API &lt;https://carto.com/developers/sql-api/reference/#tag/Batch-Queries&gt;</cite>.\nBelow is a sample workflow for how to perform a long running query that would otherwise produce timeout errors.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">cartoframes.auth</span> <span class=\"k\">import</span> <span class=\"n\">Credentials</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cartoframes.data.clients</span> <span class=\"k\">import</span> <span class=\"n\">SQLClient</span>\n\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;USER NAME&gt;&#39;</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&lt;API KEY&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"n\">SQLClient</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n\n<span class=\"n\">sql</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;LONG RUNNING QUERY&gt;&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"subdivide-data-observatory-search-region-into-sub-regions\">\n<h2>Subdivide Data Observatory search region into sub-regions<a class=\"headerlink\" href=\"#subdivide-data-observatory-search-region-into-sub-regions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Some geometries in the Data Observatory are too large, numerous, and/or complex to retrieve in one request. Census tracts (especially if they are shoreline-clipped) is one popular example. To retrieve this data, it helps to first break the search region into subregions, collect the data in each of the subregions, and then combine the data at the end. To avoid duplicate geometries along the sub-region edges, we apply the <cite>DataFrame.drop_duplicates</cite> method for the last step.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n\n<span class=\"c1\"># bbox that encompasses lower 48 states of USA</span>\n<span class=\"n\">bbox</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">-</span><span class=\"mf\">126.8220242454</span><span class=\"p\">,</span>\n    <span class=\"mf\">22.991640246</span><span class=\"p\">,</span>\n    <span class=\"o\">-</span><span class=\"mf\">64.35549002</span><span class=\"p\">,</span>\n    <span class=\"mf\">51.5559807141</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># make these numbers larger if the sub-regions are not small enough</span>\n<span class=\"c1\"># make these numbers smaller to get more data in one call</span>\n<span class=\"n\">num_divs_lng</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">num_divs_lat</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">delta_lng_divs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">num_divs_lng</span>\n<span class=\"n\">delta_lat_divs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">/</span> <span class=\"n\">num_divs_lat</span>\n\n<span class=\"n\">sub_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_divs_lng</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_divs_lat</span><span class=\"p\">)):</span>\n    <span class=\"n\">sub_bbox</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">delta_lng_divs</span><span class=\"p\">,</span>\n        <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">delta_lat_divs</span><span class=\"p\">,</span>\n        <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">delta_lng_divs</span><span class=\"p\">,</span>\n        <span class=\"n\">bbox</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">delta_lat_divs</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">_df</span> <span class=\"o\">=</span> <span class=\"n\">do</span><span class=\"o\">.</span><span class=\"n\">boundaries</span><span class=\"p\">(</span>\n        <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"n\">sub_bbox</span><span class=\"p\">,</span>\n        <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"s1\">&#39;us.census.tiger.census_tract_clipped&#39;</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">sub_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_df</span><span class=\"p\">)</span>\n\n<span class=\"n\">df_all</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">sub_data</span><span class=\"p\">)[[</span><span class=\"s1\">&#39;geom_refs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;the_geom&#39;</span><span class=\"p\">]]</span>\n<span class=\"n\">df_all</span><span class=\"o\">.</span><span class=\"n\">drop_duplicates</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">del</span> <span class=\"n\">sub_data</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["etl", "ETL with cartoframes", "N", "next"], ["examples", "Example Datasets", "P", "previous"]], "sourcename": "cookbook.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Cheat Sheet</a><ul>\n<li><a class=\"reference internal\" href=\"#how-to-get-census-tracts-or-counties-for-a-state\">How to get census tracts or counties for a state</a></li>\n<li><a class=\"reference internal\" href=\"#get-raw-measures-from-the-do\">Get raw measures from the DO</a></li>\n<li><a class=\"reference internal\" href=\"#engineer-your-do-metadata-if-you-already-have-geoid-or-another-geom-ref\">Engineer your DO metadata if you already have GEOID or another geom_ref</a></li>\n<li><a class=\"reference internal\" href=\"#get-a-table-as-a-geodataframe\">Get a table as a GeoDataFrame</a></li>\n<li><a class=\"reference internal\" href=\"#skip-ssl-verification\">Skip SSL verification</a></li>\n<li><a class=\"reference internal\" href=\"#perform-long-running-query-if-a-timeout-occurs\">Perform long running query if a timeout occurs</a></li>\n<li><a class=\"reference internal\" href=\"#subdivide-data-observatory-search-region-into-sub-regions\">Subdivide Data Observatory search region into sub-regions</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "cookbook", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}